{"ast":null,"code":"var clientId = ''; // Insert client ID here.\nvar redirectUri = 'http://localhost:3000/'; // Have to add this to your accepted Spotify redirect URIs on the Spotify API.\nvar accessToken;\nvar Spotify = {\n  getAccessToken: function getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n    var accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    var expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      var expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(function () {\n        return accessToken = '';\n      }, expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/'); // This clears the parameters, allowing us to grab a new access token when it expires.\n      return accessToken;\n    } else {\n      var accessUrl = \"https://accounts.spotify.com/authorize?client_id=\".concat(clientId, \"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectUri);\n      window.location = accessUrl;\n    }\n  },\n  search: function search(term) {\n    var accessToken = Spotify.getAccessToken();\n    return fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(term), {\n      headers: {\n        Authorization: \"Bearer \".concat(accessToken)\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (jsonResponse) {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n      return jsonResponse.tracks.items.map(function (track) {\n        return {\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri\n        };\n      });\n    });\n  },\n  savePlaylist: function savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n    var accessToken = Spotify.getAccessToken();\n    var headers = {\n      Authorization: \"Bearer \".concat(accessToken)\n    };\n    var userId;\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    }).then(function (response) {\n      return response.json();\n    }).then(function (jsonResponse) {\n      userId = jsonResponse.id;\n      return fetch(\"https://api.spotify.com/v1/users/\".concat(userId, \"/playlists\"), {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(function (response) {\n        return response.json();\n      }).then(function (jsonResponse) {\n        var playlistId = jsonResponse.id;\n        return fetch(\"https://api.spotify.com/v1/users/\".concat(userId, \"/playlists/\").concat(playlistId, \"/tracks\"), {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({\n            uris: trackUris\n          })\n        });\n      });\n    });\n  }\n};\nexport default Spotify;","map":{"version":3,"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris"],"sources":["/Users/ivensouffrant/jammming-project-solution/src/util/Spotify.js"],"sourcesContent":["const clientId = ''; // Insert client ID here.\nconst redirectUri = 'http://localhost:3000/'; // Have to add this to your accepted Spotify redirect URIs on the Spotify API.\nlet accessToken;\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/'); // This clears the parameters, allowing us to grab a new access token when it expires.\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = { Authorization: `Bearer ${accessToken}` };\n    let userId;\n\n    return fetch('https://api.spotify.com/v1/me', {headers: headers}\n    ).then(response => response.json()\n    ).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({name: name})\n      }).then(response => response.json()\n      ).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({uris: trackUris})\n        });\n      });\n    });\n  }\n};\n\nexport default Spotify;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}